name: Deploy to AWS ECR

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Amazon ECR
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/b7r1g3n1

      - name: Build and push Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          
          # Build the Docker image
          docker build -t rds:${IMAGE_TAG} .
          
          # Tag the image for the ECR repository
          docker tag rds:${IMAGE_TAG} public.ecr.aws/b7r1g3n1/rds:${IMAGE_TAG}
          
          # Push the image to the ECR repository
          docker push public.ecr.aws/b7r1g3n1/rds:${IMAGE_TAG}

      - name: Deploy to EC2 and run with Docker Compose
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key

          # Use SSH non-interactively by using -T
          ssh -T -o StrictHostKeyChecking=no -i /tmp/ssh_key ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            echo "Logged into EC2 instance"
            mkdir -p /home/ec2-user/Docker/ # Create the project directory if it doesn't exist
            cd /home/ec2-user/Docker/ # Navigate to the project directory

            # Check if the docker-compose.yml file exists
            if [ ! -f docker-compose.yml ]; then
              echo "Error: docker-compose.yml not found!"
              exit 1
            fi

              git clone git@github.com:darktend/project1.git
              cd project1
            # Pull the latest changes from the repository
            git pull origin master

            # Log in to ECR on the EC2 instance
            aws ecr-public get-login-password --region us-east-2 | docker login --username AWS --password-stdin public.ecr.aws/b7r1g3n1

            # Pull the latest Docker image from ECR
            sudo docker pull public.ecr.aws/b7r1g3n1/rds:${IMAGE_TAG}

            # Stop the Docker Compose stack
            sudo docker-compose down

            # Start the Docker Compose stack
            sudo docker-compose up -d
          EOF

          # Clean up the SSH key
          rm /tmp/ssh_key
