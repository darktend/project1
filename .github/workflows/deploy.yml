name: Deploy to AWS ECR

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Amazon ECR
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/b7r1g3n1

      - name: Build and push Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          
          # Build the Docker image
          docker build -t rds .
          
          # Tag the image for the ECR repository
          docker tag rds:latest public.ecr.aws/b7r1g3n1/rds:latest
          
          # Push the image to the ECR repository
          docker push public.ecr.aws/b7r1g3n1/rds:latest

      - name: Deploy to EC2 and run with Docker Compose
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key ec2-user@${{ secrets.EC2_HOST }} << EOF
            echo "Logged into EC2 instance"
            cd /home/ec2-user/Docker/ # Перехід у каталог проекту

            # Pull the latest changes from the repository
            git pull origin master

            # Log in to ECR on the EC2 instance
            aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/b7r1g3n1

            # Pull the latest Docker image from ECR
            docker pull public.ecr.aws/b7r1g3n1/rds:latest

            # Update the Docker Compose file with the new image tag only for the web service
            #sed -i '/web:/,/image:/s|image: .*|image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/rds:$IMAGE_TAG|g' docker-compose.yml

            # Stop the Docker Compose stack
            docker-compose down

            # Start the Docker Compose stack
            docker-compose up -d
          EOF

          # Clean up the SSH key
          rm /tmp/ssh_key