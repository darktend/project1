services:
  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: dev
    image: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/web:${IMAGE_TAG}"
    ports:
      - "80:80"
    env_file:
      - .env
    volumes:
      - .:/app
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first


  backend_redis:
    build:
      context: ./backend_redis
      dockerfile: Dockerfile
      target: dev
    image: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/redis:${IMAGE_TAG}"
    ports:
      - "6379:6379"
    env_file:
      - .env
    volumes:
      - .:/app
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first


  backend_rds:
  build:
    context: ./backend_rds  # Ensure this points to the correct directory containing manage.py
    dockerfile: Dockerfile
    target: dev
  command: python manage.py runserver 0.0.0.0:8000
  image: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/rds:${IMAGE_TAG}"
  ports:
    - "5432:5432"
  env_file:
    - .env
  volumes:
    - ./backend_rds:/app  # Ensure this volume mounts the correct directory
  deploy:
    replicas: 1
    restart_policy:
      condition: on-failure
    update_config:
      parallelism: 1
      delay: 10s
      order: start-first

volumes:
  postgres_data:
